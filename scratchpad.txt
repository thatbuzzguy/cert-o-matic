#   with open("root_cert.der", "wb") as f:
#      f.write(root_cert.public_bytes(serialization.Encoding.DER))
     
#   with open("root_private_key.der", "wb") as f:
#      f.write(private_key1.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, encryption_algorithm=serialization.NoEncryption()))

      self.app_version
      self.config_file
      self.back_end 
      self.initialized 
      self.common_name
      self.subject_alternate_names 
      self.email_address
      self.organization
      self.organizational_unit
      self.city_or_locality
      self.state_or_province
      self.country_name
      self.signature_algorithm
      self.signature_hash_algorithm
      self.certificate_lifetime
      self.private_key_file_name
      self.private_key_format
      self.private_key_password
      self.root_certificate_file_name
      self.root_certificate_format
      self.fqdn
      self.ip_address
      self.port_number
      self.auth_psk
      self.config_file
      self.database


from flask import Flask, request, jsonify, Response

app = Flask(__name__)

@app.route('/')
def version():
    return(appversion)

@app.route('/test')
def test():

resp = Response(response=certversion, status=200, mimetype="application/json")
    return(resp)


    #save_configuration(ca_issuer_name, cert_lifetime, hash_name)
    #load_configuration(ca_issuer_name, cert_lifetime, hash_name)


    #with open("client_cert.der", "wb") as f:
    #   f.write(client_cert.public_bytes(serialization.Encoding.DER))


    # print(client_cert.public_bytes(serialization.Encoding.PEM).decode(encoding="utf-8", errors="strict"))
    #print(private_key2.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, \
    #   encryption_algorithm=serialization.BestAvailableEncryption(b'mypassword')).decode(encoding="utf-8", errors="strict"))


common_name = build_subject_name(input_subject)

private_key = gen_rsa_private_key(2048)
public_key = gen_rsa_public_key(private_key)

csr = gen_csr(private_key, common_name)
rootcert = gen_root_cert(private_key, public_key, csr)
childcert = gen_child_cert(private_key, public_key, csr, common_name)

with open("root_cert.der", "wb") as f:
    f.write(rootcert.public_bytes(serialization.Encoding.DER))
with open("child_cert.der", "wb") as f:
    f.write(childcert.public_bytes(serialization.Encoding.DER))
with open("csr.pem", "wb") as f:
    f.write(csr.public_bytes(serialization.Encoding.PEM))

input_subject = input('Enter the Subject: ')
print('test')
