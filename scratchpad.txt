from flask import Flask, request, jsonify, Response

app = Flask(__name__)

@app.route('/')
def version():
    return(appversion)

@app.route('/test')
def test():

resp = Response(response=certversion, status=200, mimetype="application/json")
    return(resp)


    #save_configuration(ca_issuer_name, cert_lifetime, hash_name)
    #load_configuration(ca_issuer_name, cert_lifetime, hash_name)


    #with open("client_cert.der", "wb") as f:
    #   f.write(client_cert.public_bytes(serialization.Encoding.DER))


    # print(client_cert.public_bytes(serialization.Encoding.PEM).decode(encoding="utf-8", errors="strict"))
    #print(private_key2.private_bytes(encoding=serialization.Encoding.PEM, format=serialization.PrivateFormat.PKCS8, \
    #   encryption_algorithm=serialization.BestAvailableEncryption(b'mypassword')).decode(encoding="utf-8", errors="strict"))


common_name = build_subject_name(input_subject)

private_key = gen_rsa_private_key(2048)
public_key = gen_rsa_public_key(private_key)

csr = gen_csr(private_key, common_name)
rootcert = gen_root_cert(private_key, public_key, csr)
childcert = gen_child_cert(private_key, public_key, csr, common_name)

with open("root_cert.der", "wb") as f:
    f.write(rootcert.public_bytes(serialization.Encoding.DER))
with open("child_cert.der", "wb") as f:
    f.write(childcert.public_bytes(serialization.Encoding.DER))
with open("csr.pem", "wb") as f:
    f.write(csr.public_bytes(serialization.Encoding.PEM))

input_subject = input('Enter the Subject: ')
print('test')
